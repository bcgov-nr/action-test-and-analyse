name: Unit Test and Analysis with SonarCloud
description: Run unit tests (current node only), can send to SonarCloud
branding:
  icon: check-square
  color: blue

inputs:
  ### Required
  commands:
    description: Commands to run unit tests, start with '|' for multi-line
    required: true
  dir:
    description: App/package directory
    required: true

  ### Typical / recommended
  node_version:
    description: Node version, defaults to 16 (LTS)
    default: "16"
  sonar_args:
    # https://docs.sonarcloud.io/advanced-setup/analysis-parameters/
    description: SonarCloud command line arguments
    default: |
      -Dsonar.organization=bcgov-sonarcloud
      -Dsonar.projectKey=bcgov_${{ github.repository }}
  sonar_comment_token:
    description: Token for pull request comments, usually secrets.GITHUB_TOKEN
  sonar_project_token:
    description: Sonar token, default is empty, which skips Sonar steps
  triggers:
    description: Paths used to trigger a test, defaults to always triggering; e.g. ('./backend/', './frontend/)

  ### Usually a bad idea / not recommended
  diff_branch:
    default: ${{ github.event.repository.default_branch }}
    description: Branch to diff against, uses GitHub's default (usually main)
  repository:
    description: Non-default repository to clone
    default: ${{ github.repository }}

runs:
  using: composite
  steps:
    # SonarCloud requires shallow clone (fetch-depth=0), which is a bit slower/heavier
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        repository: ${{ inputs.repository }}

    # Process inputs
    - id: variables
      shell: bash
      run: |
        # Process inputs and vars
        if [ -z "${{ inputs.sonar_comment_token }}" ]; then
          echo "comment=false" >> $GITHUB_OUTPUT
        else
          echo "comment=true" >> $GITHUB_OUTPUT
        fi

        # User for workstation ownership reset/fix
        echo "uid=$(id -u ${USER})" >> $GITHUB_OUTPUT

        # Always trigger if input not provided
        if [ -z "${{ inputs.triggers }}" ]; then
          echo "triggered=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Run git diff against provided triggers
        TRIGGERS=${{ inputs.triggers }}
        while read -r check; do
          for t in "${TRIGGERS[@]}"; do
            if [[ "${check}" =~ "${t}" ]]; then
                echo "Triggers matched against changed files"
                echo -e "${t}\n --> ${check}"
                echo "triggered=true" >> $GITHUB_OUTPUT
                exit 0
            fi
          done
        done < <(git diff origin/${{ inputs.diff_branch }} --name-only)

        # If at this point, no triggers have matched changes
        echo "Triggers not matched against changed files"
        echo "triggered=false" >> $GITHUB_OUTPUT

    # Skip message
    # - if: steps.variables.outputs.triggered != 'true'
    - env:
        comment: ${{ steps.variables.outputs.comment }}
        triggered: ${{ steps.variables.outputs.triggered }}
        uid: ${{ steps.variables.outputs.uid }}
      shell: bash
      run: |
        # Steps skipped
        echo "comment=$comment"
        echo "node_version=${{ inputs.node_version }}"
        echo "triggered=$triggered"
        echo "uid=$uid"
        echo "Triggers did not fire, steps are being skipped"

    - shell: bash
      run: |
        export FOO=bar
        echo "FOO=$FOO" >> $GITHUB_OUTPUT
    - shell: bash
      run: echo $FOO

    # Setup and cache dir
    - if: steps.variables.outputs.triggered == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ inputs.node_version }}
    - if: steps.variables.outputs.triggered == 'true'
      id: npm-cache-dir
      shell: bash
      run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
    - if: steps.variables.outputs.triggered == 'true'
      uses: actions/cache@v3
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    # Run tests, hopefully generating coverage for SonarCloud
    - if: steps.variables.outputs.triggered == 'true'
      name: Run Tests
      shell: bash
      run: |
        cd ${{ inputs.dir }}
        ${{ inputs.commands }}

    ### Optional SonarCloud

    # If sonar_project_token and sonar_comment_token, then run with comments
    - name: SonarCloud Scan
      if: steps.variables.outputs.triggered == 'true' && inputs.sonar_project_token
      uses: SonarSource/sonarcloud-github-action@v1.8
      env:
        GITHUB_TOKEN: ${{ inputs.sonar_comment_token }}
        SONAR_TOKEN: ${{ inputs.sonar_project_token }}
      with:
        projectBaseDir: ${{ inputs.dir }}
        args: >
          -Dsonar.pullrequest.github.summary_comment=${{ steps.variables.outputs.comment }}
          ${{ inputs.sonar_args }}

    # Fix - Docker takes ownership of files, causing a cleanup fail
    - if: steps.variables.outputs.triggered == 'true' && inputs.sonar_project_token
      uses: peter-murray/reset-workspace-ownership-action@v1
      with:
        user_id: ${{ steps.variables.outputs.uid }}

    # Fix - Clone for action.yml and other verifications
    - name: Checkout Action repo to pass tests
      uses: actions/checkout@v3
